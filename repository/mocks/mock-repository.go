// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import repository "github.com/kucjac/go-rest-sdk/repository"

// MockRepository is an autogenerated mock type for the MockRepository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *MockRepository) Create(req interface{}) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: req
func (_m *MockRepository) Delete(req interface{}) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: req
func (_m *MockRepository) Get(req interface{}) (interface{}, error) {
	ret := _m.Called(req)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: req
func (_m *MockRepository) List(req interface{}) (interface{}, error) {
	ret := _m.Called(req)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWithParams provides a mock function with given fields: req, params
func (_m *MockRepository) ListWithParams(req interface{}, params *repository.ListParameters) (interface{}, error) {
	ret := _m.Called(req, params)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}, *repository.ListParameters) interface{}); ok {
		r0 = rf(req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, *repository.ListParameters) error); ok {
		r1 = rf(req, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: what, where
func (_m *MockRepository) Patch(what interface{}, where interface{}) error {
	ret := _m.Called(what, where)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(what, where)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: req
func (_m *MockRepository) Update(req interface{}) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
